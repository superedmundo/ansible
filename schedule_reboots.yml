---
- name: Agendar tareas
  hosts: "{{ target_host | default('all') }} "
  gather_facts: false
  collections:
    - awx.awx
    - community.general
  vars_files:
    - ./oscarc_otobo_password
  vars:    
    # awx vars
    awx_host: "awx.ditra"
    awx_token: "TH07zVTCnFlmyO6IUU2ABf80ZPOuKY"

    target_host: localhost
    schedule_name: "Programación automática para el host"
    unified_job_template_name: "Reboot Windows Server"
    host_schedule: []

    time_zone: "America/Mexico_City"

    # otobo vars
    validate_certs: false
    otobo_user: baltadlakd
    base_url: https://10.100.1.124/otobo/nph-genericinterface.pl/Webservice
    config_item_class: Computer
    config_item_name: ActiveDirectory2012R2
    config_item_note: Reboot
    email: baltadlakd@gmail.com
    cell: 3321097551
    module:
      login: /care
      cmdb: /CMDB/ConfigItem
    path:
      login: "{{ base_url }}{{ module.login }}/login"
      Ticket: "{{ base_url }}{{ module.login }}/Ticket"
      cmdb:
        retrieve: "{{ base_url }}{{ module.cmdb }}"
        create: "{{ base_url }}{{ module.cmdb }}"
        patch: "{{ base_url }}{{ module.cmdb }}/update"
        delete: "{{ base_url }}{{ module.cmdb }}/delete"
        search: "{{ base_url }}{{ module.cmdb }}/search"
    TicketID: null
    counter: 0
  
  tasks:
    # tareas para obtener la relacion de host : horario para reiniciar los servers
    - name: Otobo login, get session id
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ path.login }}"
        method: POST
        body_format: json
        body:
          UserLogin: "{{ otobo_user }}"
          Password: "{{ otobo_password }}"
        validate_certs: "{{ validate_certs }}"
        return_content: true
      register: response

    - name: Get SessionID from login response
      ansible.builtin.set_fact:
        session_id: "{{ r.SessionID }}"
      vars:
        r: "{{ response.content | from_json }}"
      delegate_to: localhost

    - name: Search computers from cmdb to reboot
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ path.cmdb.search }}"
        method: POST
        body_format: json
        body:
          SessionID: "{{ session_id }}"
          ConfigItem:
            Class: "{{ config_item_class }}"
            #Name: "{{ config_item_name }}"
            CIXMLData: 
              Note: "Reboot"
        validate_certs: "{{ validate_certs }}"
        return_content: true
      register: response

    - name: set_fact ConfigItemIDS
      delegate_to: localhost
      ansible.builtin.set_fact:
        ids: "{{ r.ConfigItemIDs | default([]) }}"
      vars:
        r: "{{ response.content | from_json }}"

    - name: Get ConfigItemID
      delegate_to: localhost
      ansible.builtin.uri:
        url: "{{ path.cmdb.retrieve }}?SessionID={{ session_id }}&ConfigItemID={{ item }}"
        method: GET
        validate_certs: "{{ validate_certs }}"
        return_content: true
      with_items: "{{ ids }}"
      register: response

    - name: set_fact HoraReboot & IPAddress
      delegate_to: localhost
      ansible.builtin.set_fact:
        HoraReboot: "{{ response | community.general.json_query('results[*].json.ConfigItem[0].CIXMLData.HoraReboot')  }}"
        IPAddress: "{{ response | community.general.json_query('results[*].json.ConfigItem[0].CIXMLData.NIC.IPAddress')  }}"

    - name: set_fact host_schedule
      delegate_to: localhost
      ansible.builtin.set_fact:
        host_schedule: "{{ host_schedule | default({}) | combine({ item[0]: item[1] }) }}"
      loop: "{{ IPAddress | zip(HoraReboot) | list }}"

    - name: Desplegando host_schedule
      ansible.builtin.debug:
        msg: 
          host_schedule: "{{ host_schedule }}" 

    # tareas para agendar las ejecuciones
    - name: "Obtener fecha actual en el formato '%Y%m%d'"
      # shell: "date +'%Y%m%d'"
      command: "date +%Y%m%d"
      environment:
        TZ: "{{ time_zone }}"
      register: current_date

    - name: Mostrar fecha generada
      debug:
        var: current_date.stdout

    - name: Build a schedule for Demo Job Template
      awx.awx.schedule:
        name: "{{ schedule_name }} '{{ item.key }}'"
        state: present
        extra_data:
          target_host: "{{ item.key }}"
        controller_host: "{{ awx_host }}"
        controller_oauthtoken: "{{ awx_token }}"
        unified_job_template: "{{ unified_job_template_name }}"
        validate_certs: "{{ validate_certs }}"
        rrule: "DTSTART;TZID={{ time_zone }}:{{ current_date.stdout }}T{{ item.value }} RRULE:INTERVAL=1;COUNT=1;FREQ=MINUTELY"
      loop: "{{ host_schedule | dict2items }}"
      register: result

    - name: Mostrar del ciclo
      debug:
        var: result